#! /usr/bin/env python

import argparse
import os
import time

parser = argparse.ArgumentParser(description="microjournal")
parser.add_argument("command", metavar='c',
                    help="A command for microjournal. One of init, jot or safekeep")
parser.add_argument("repo", metavar='r', nargs='?',
                    help="Specify a repo")

args = parser.parse_args()

COMMAND = args.command
REPO = args.repo
ENTRIES_DIR = "entries"

def init_journal():
    if REPO == None :
        exit("MicroJournal: You need to provide a repo while initializing\n" +
             "Use microjournal init <repo-url>")
    print "Initializing microjournal..."
    sts = os.system("git init")
    check_err(sts, "\nMicroJournal: Error occurred while initializing Git repo!")

    sts = os.system("git remote add origin " + args.repo)
    check_err(sts, "\nMicroJournal: Error occurred while setting remote for the Git repo!")

def jot():
    editor = os.getenv("EDITOR")
    if editor is None or editor.strip() == "" :
        exit("MicroJournal: $EDITOR not set. Set it to your favorite editor")
    editor = editor.strip()

    create_entries_dir()
    create_dir_for_today()
    entry = create_entry()
    sts = os.system((" ").join([editor, entry]))
    check_err(sts, "\nMicroJournal: Error editing the entry")

def safekeep():
    sts = os.system("git add entries/")
    check_err(sts, "\nMicroJournal: Error adding entries/ dir to Git")

    sts = os.system("git commit -am \"" + time.asctime() + "\"")

    sts = os.system("git push origin master")
    check_err(sts, "\nMicroJournal: Error pushing to remote")
    print("\nMicroJournal: Pushed all entries to remote")

def wrong_command():
    exit("\nMicroJournal: Invalid command " + COMMAND + " given. Use one of init, safekeep or jot")

def check_err(sts, msg):
    if sts != 0 :
        exit(msg)


def todays_entry():
    ts = time.localtime()
    entry = str(ts.tm_mday)
    return entry

def create_entry():
    entry = os.path.sep.join([todays_dir(), todays_entry()])
    fh = open(entry, "a")
    fh.write(time.asctime() + "\n\n")
    fh.close()
    return entry

def create_entries_dir():
    ensure_dir(ENTRIES_DIR)

def create_dir_for_today():
    ensure_dir(todays_dir())

def todays_dir():
    ts = time.localtime()
    sep = os.path.sep
    return sep.join(map(str, [ENTRIES_DIR, ts.tm_year, ts.tm_mon]))


def ensure_dir(dir):
    if not os.path.exists(dir):
        os.makedirs(dir)

OPTIONS = {
    'init': init_journal,
    'safekeep': safekeep,
    'jot': jot
}

OPTIONS.get(COMMAND, wrong_command)()
